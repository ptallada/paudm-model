# Created on: Dec 14, 2010
#     Author: N.Tonello
# --- log.config initialization -----------------------------------------------------
#
#-- LOGGERS, HANDLERS and FORMATTERS KEYS --
#
#The "loggers" section contains the key names for all the loggers in this
#configuration. These are not the actual channel names, but values used to
#identify where the parameters for each logger are found in this file.
#The section for an individual logger is named "logger_xxx" where the "key"
#for a logger is "xxx". So ... "logger_root", "logger_log02", etc. further
#down the file, indicate how the root logger is set up, logger "log_02" is set
#up, and so on.
#Logger key names can be any identifier, except "root" which is reserved for
#the root logger. (The names "lognn" are generated by the GUI configurator.)
#The "formatters" section contains the key names for all the formatters in
#this configuration. Just as for loggers and handlers above, the key names
#are values used to identify where the parameters for each formatter are found
#in this file.
#Formatter key names can be any identifier. (The names "formnn" are generated
#by the GUI configurator.)
#
#The section below indicates the information relating to the root logger.
#
#The level value needs to be one of DEBUG, INFO, WARN, ERROR, CRITICAL or NOTSET.
#In the root logger, NOTSET indicates that all messages will be logged.
#Level values are eval()'d in the context of the logging package's namespace.
#
#The propagate value indicates whether or not parents of this loggers will
#be traversed when looking for handlers. It doesn't really make sense in the
#root logger - it's just there because a root logger is almost like any other
#logger.
#
#The channel value indicates the lowest portion of the channel name of the
#logger. For a logger called "a.b.c", this value would be "c".
#
#The parent value indicates the key name of the parent logger, except that
#root is shown as "(root)" rather than "root".
#
#The qualname value is the fully qualified channel name of the logger. For a
#logger called "a.b.c", this value would be "a.b.c".
#
#The handlers value is a comma-separated list of the key names of the handlers
#attached to this logger.
#
#If the level value were NOTSET, this tells
#the logging package to consult the parent (as long as propagate is 1) for the
#effective level of this logger. If propagate is 0, this level is treated as for
#the root logger - a value of NOTSET means "pass everything", and other values are
#interpreted at face value.
#
#-- HANDLERS --
#
#The section below indicates the information relating to handler "hand01".
#The first three keys (class, level and formatter) are common to all handlers.
#Any other values are handler-specific, except that "args", when eval()'ed,
#is the list of arguments to the constructor for the handler class.
#
#The class value indicates the handler's class (as determined by eval() in
#the logging package's namespace).
#
#The level value needs to be one of DEBUG, INFO, WARN, ERROR, CRITICAL or NOTSET.
#NOTSET means "use the parent's level".
#
#The formatter value indicates the key name of the formatter for this handler.
#If blank, a default formatter (logging._defaultFormatter) is used.
#
#The stream value indicates the stream for this StreamHandler. It is computed
#by doing eval() on the string value in the context of the logging package's
#namespace.
#
#The args value is a tuple of arguments which is passed to the constructor for
#this handler's class in addition to the "self" argument.
#
#The section below indicates the information relating to handler "hand02".
#The first three keys are common to all handlers.
#Any other values are handler-specific, except that "args", when eval()'ed,
#is the list of arguments to the constructor for the handler class.
#
#The filename value is the name of the file to write logging information to.
#The mode value is the mode used to open() the file. The maxsize and backcount
#values control rollover as described in the package's API documentation.
#
#-- FORMATTERS --
#
#The section for an individual formatter is named "formatter_xxx" where the
#"key" for a formatter is "xxx". So sections "formatter_form01",
#"formatter_form02", etc. further down the file indicate how the formatters
#"form01", "form02" etc. are set up.
#The sections below indicate the information relating to the various
#formatters. The format value is the overall format string, and the
#datefmt value is the strftime-compatible date/time format string. If
#empty, the logging package substitutes ISO8601 format date/times where
#needed. See the package API documentation for more details
#of the format string structure.
#
#-----------------

[loggers]
keys=root,sqlalchemy.engine

[handlers]
keys=console,file,sqlfile,sqlconsole

[formatters]
keys=brief,precise

#-----------------------
[logger_root]
level=NOTSET
handlers=console,file

[logger_sqlalchemy.engine]
level=%(sql_level)s
propagate=0
handlers=sqlfile,sqlconsole
qualname=sqlalchemy.engine

#------------------------
[handler_sqlfile]
class=FileHandler
# Configure the logging level of the stdout
level=%(sql_level)s
formatter=precise
args=('%(file_name)s', 'a')
#args=(sys.stdout,)
#stream=sys.stdout

[handler_sqlconsole]
class=StreamHandler
# Configure the logging level of the stdout
level=WARNING
formatter=brief
args=(sys.stdout,)
stream=sys.stdout


[handler_file]
class=FileHandler
# Configure the logging level for the log file
level=%(file_level)s 
formatter=precise
#Define the name (and location) of the log file
args=('%(file_name)s', 'a')

[handler_console]
class=StreamHandler
# Configure the logging level of the stdout
level=%(console_level)s
formatter=brief
args=(sys.stdout,)
stream=sys.stdout

#-------------------------
[formatter_brief]
#Define the format of the messages displayed
format=%(asctime)s  %(levelname)-8s %(name)-15s %(message)s
datefmt=%d-%m-%Y %H:%M

[formatter_precise]
#Define the format of the log file messages
format=%(asctime)s  %(levelname)-8s %(name)-15s %(message)s
datefmt=%d-%m-%Y %H:%M:%S